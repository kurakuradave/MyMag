{
  "name": "gamepad",
  "version": "1.0.2",
  "description": "node bindings to the Gamepad library",
  "author": {
    "name": "Tim Caswell",
    "email": "tim@creationix.com"
  },
  "license": "MIT",
  "gypfile": true,
  "bugs": {
    "url": "https://github.com/creationix/node-gamepad/issues"
  },
  "homepage": "https://github.com/creationix/node-gamepad",
  "main": "gamepad.js",
  "repository": {
    "type": "git",
    "url": "https://github.com/creationix/node-gamepad.git"
  },
  "keywords": [
    "gamepad",
    "joystick"
  ],
  "scripts": {
    "build": "node-gyp build",
    "test": "echo \"Error: no test specified\" && exit 1",
    "install": "node-pre-gyp install --fallback-to-build"
  },
  "dependencies": {
    "node-pre-gyp": "0.5.31"
  },
  "devDependencies": {
    "aws-sdk": "~2.0.21"
  },
  "binary": {
    "module_name": "gamepad",
    "module_path": "./build/{module_name}/v{version}/{configuration}/{node_abi}-{platform}-{arch}/",
    "remote_path": "./{module_name}/v{version}/{configuration}/",
    "package_name": "{node_abi}-{platform}-{arch}.tar.gz",
    "host": "https://node-gamepad.s3.amazonaws.com"
  },
  "readme": "node-gamepad\n============\n\nBindings for Alex Diener's cross-platform gamepad code\n\nThe library is tiny and included inside this addon so you don't need any special libraries installed on your system like SDL.\n\nTo install as a dependency simple type the following in your project's folder:\n\n```sh\nnpm install gamepad\n```\n\n## Examples\n\n```js\nvar gamepad = require(\"gamepad\");\n\n// Initialize the library\ngamepad.init()\n\n// List the state of all currently attached devices\nfor (var i = 0, l = gamepad.numDevices(); i < l; i++) {\n  console.log(i, gamepad.deviceAtIndex());\n}\n\n// Create a game loop and poll for events\nsetInterval(gamepad.processEvents, 16);\n// Scan for new gamepads as a slower rate\nsetInterval(gamepad.detectDevices, 500);\n\n// Listen for move events on all gamepads\ngamepad.on(\"move\", function (id, axis, value) {\n  console.log(\"move\", {\n    id: id,\n    axis: axis,\n    value: value,\n  });\n});\n\n// Listen for button up events on all gamepads\ngamepad.on(\"up\", function (id, num) {\n  console.log(\"up\", {\n    id: id,\n    num: num,\n  });\n});\n\n// Listen for button down events on all gamepads\ngamepad.on(\"down\", function (id, num) {\n  console.log(\"down\", {\n    id: id,\n    num: num,\n  });\n});\n\n```\n\n## Events\n\nThere are 5 event types `attach`, `remove`, `down`, `up`, and `move`.  All pass the session id of the gamepad as the first argument.\n\nThe `attach` event also passes current state as the second arg to attach.\n\nThe `down` and `up` events also pass in the button id and timestamp after device session id.\n\nThe `move` event passes axis, value, old value and timestamp after session id.\n\n## Functions\n\n### gamepad.init()\n\nInitializes gamepad library and detects initial devices. Call this before any\nother library function. If you want to receive attach events callbacks from\ndevices detected in `gamepad.init()`, you must listen for `attach` before\ncalling `gamepad.init()`.\n\n### gamepad.shutdown()\n\nTears down all data structures created by the gamepad library and releases any\nmemory that was allocated. It is not necessary to call this function at\napplication termination, but it's provided in case you want to free memory\nassociated with gamepads at some earlier time.\n\n### numDevices()\n\nReturns the number of currently attached gamepad devices.\n\n### deviceAtIndex(deviceIndex)\n\nReturns the specified gamepad's current state, or `undefined` if deviceIndex is\nout of bounds.\n\n### detectDevices()\n\nPolls for any devices that have been attached since the last call to\n`gamepad.detectDevices()` or `gamepad.init()`. If any new devices are found, the\n`attach` event will be emitted once per newly detected device.\n\nNote that depending on implementation, you may receive button and axis event\ncallbacks for devices that have not yet been detected with\n`gamepad.detectDevices()`. You can safely ignore these events, but be aware that\nyour callbacks might receive a device ID that hasn't been emitted as an `attach`\nevent yet.\n\n### processEvents()\n\nReads pending input from all attached devices and emits the appropriate events,\nif any have been registered.\n",
  "readmeFilename": "README.md",
  "bundleDependencies": [
    "node-pre-gyp"
  ],
  "_id": "gamepad@1.0.2",
  "_from": "gamepad@"
}
